public class Animal {      //это суперкласс, от которого наследуются другие (под)классы типа Cat, Dog, Hamtser  и др
      String name;          //Подкласс наследует члены, определённые в суперклассе, добавляя к ним собственные.
                            //Если у суперкласса будет private поле, то подкласс не унаследует это поле.
                            //Класс, содержащий хоть один абстрактный метод, должен быть объявлен как абстрактный то есть public abstract class Animal
                            //Любой подкласс, производный от абстрактного класса, обязан реализовать все абстрактные методы из своего суперкласса
                            // (при условии что подкласс сам не является абстрактным).
                            //При этом абстрактный класс вполне может содержать конкретные реализации методов.
    public Animal(){ //конструктор
    }

    public Animal(String name){
        this.name = name;
    }

    public void animalInfo(){
        System.out.println("Животное " + name); //этот метод наследуют все подклассы
    }

    public void jump(){
        System.out.println("Животное подпрыгнуло");
    }

    public void voice(){
        System.out.println("животное издало какой-то звук"); //метод для всех подклассов, но мы его можем переопределить
                         //в самих подклассах, придав конкретный звук каждлму животному
    }
    //метод voice может быть абстрактным, в суперклассе для них никакой реализации не предусмотрено,
    // и они обязательно должны быть переопределены в подклассе.
    //abstract void voice();При указании ключевого слова abstract в объявлении метода, тело метода будет отсутствовать.



//    Ключевое слово final в сочетании с наследованием
//    Существует несколько способов использования ключевого слова final:
//    Первый способ: создание именованной константы.
    final int MONTHS_COUNT = 12; // final в объявлении поля или переменной
    
//    Второй способ: предотвращение переопределения методов: подклассы не имеют возможности переопределять final метод
    public final void run() {  // final в объявлении метода
    }
//
//    Третий способ: запрет наследования от текущего класса.
   public final class A {      // final в объявлении класса
//    }
//
// public class B extends A {  // Ошибка, класс A не может иметь подклассы
 }

}
